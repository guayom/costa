<% 
  related_id = params[:associations] && params[:associations][field.name.to_s]
  config = field.associated_model_config
  source_abstract_model = RailsAdmin.config(form.object.class).abstract_model

  if form.object.new_record? && related_id.present? && related_id != 'new'
    selected = [config.abstract_model.get(related_id)]
  else
    selected = form.object.send(field.name)
  end
  selected_ids = selected.map { |s| s.send(field.associated_primary_key) }

  current_action = params[:action].in?(['create', 'new']) ? 'create' : 'update'
  xhr = !field.associated_collection_cache_all
  xhr = false

  # unless ['tipos'].include?(field.name.to_s)
  #   fail '123'
  # end

  collection = if xhr
    selected.map do |o| 
      [
        o.send(field.associated_object_label_method), 
        o.send(field.associated_primary_key)
      ] 
    end
  else
    # controller.list_entries(
    #   config, 
    #   :index, 
    #   field.associated_collection_scope, 
    #   false
    # ).map do |o| 
    #   [
    #     o.send(field.associated_object_label_method), 
    #     o.send(field.associated_primary_key)
    #   ]
    # end

    # fail '123'
    # config.list.items_per_page = 1000
    controller.list_entries(
      config, 
      :index, 
      nil, # field.associated_collection_scope, 
      false
    )
    # opts = {}
    # config.abstract_model.all(opts, field.associated_collection_scope)
    # fail '123' unless :tipos == field.name
    # config.abstract_model.all
  end

# fail '123'

  js_data = {
    xhr: xhr,
    :'edit-url' => (authorized?(:edit, config.abstract_model) ? edit_path(model_name: config.abstract_model.to_param, id: '__ID__') : ''),
    remote_source: index_path(config.abstract_model, source_object_id: form.object.id, source_abstract_model: source_abstract_model.to_param, associated_collection: field.name, current_action: current_action, compact: true),
    sortable: !!field.orderable,
    removable: !!field.removable,
    cacheAll: !!field.associated_collection_cache_all,
    regional: {
      chooseAll: t("admin.misc.chose_all"),
      chosen: t("admin.misc.chosen", name: config.label_plural),
      clearAll: t("admin.misc.clear_all"),
      search: t("admin.misc.search"),
      up: t("admin.misc.up"),
      down: t("admin.misc.down")
    }
  }
%>

<div style="columns: 3;">
  <%= form.collection_check_boxes field.method_name, collection, 
                                  field.associated_primary_key, 
                                  field.associated_object_label_method do |b| %>
    <%= b.label(style: 'font-weight: normal;') { b.check_box + '&nbsp;'.html_safe + b.text } %> <br>
  <% end %>                              
</div>

<!-- <div style="columns: 3;">
  <%# collection.each do |name, id| %>
    <%#= check_box_tag form.dom_name(field), id, selected_ids.include?(id) %>
    <%#= label_tag "#{form.dom_id(field)}_#{id}", name, 
      style: 'font-weight: normal;' %>
    <br>
  <%# end %>
</div>
 -->

<% selected_ids = (hdv = field.form_default_value).nil? ? selected_ids : hdv %>

<%= form.select field.method_name, collection, { selected: selected_ids, object: form.object }, field.html_attributes.reverse_merge({data: { filteringmultiselect: true, options: js_data.to_json }, multiple: true}) %>

<% if true || (authorized?(:new, config.abstract_model) && field.inline_add) %>
  <% path_hash = { model_name: config.abstract_model.to_param, modal: true } %>
  <% path_hash.merge!({ associations: { field.inverse_of => (form.object.persisted? ? form.object.id : 'new') } }) if field.inverse_of %>

  <%= link_to '#', data: { link: new_path(path_hash) }, 
                   class: "create btn btn-info", 
                   style: 'margin-left:10px' do %>
    <i class="icon-plus icon-white"></i> 
    <%= wording_for(:link, :new, config.abstract_model) %>
  <% end %>
<% end %>
